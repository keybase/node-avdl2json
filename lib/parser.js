/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,93],$V1=[6,14,19,27,30,39,40,41,42,43,56,61,62,64,75],$V2=[1,11],$V3=[6,14,19,27,30,39,40,41,42,43,56,61,62,64,75,99],$V4=[14,19,27,30,39,40,41,42,43,56,61,62,64,75,99],$V5=[1,26],$V6=[1,27],$V7=[10,14,19,27,30,39,40,41,42,43,56,61,62,64,75,78,89,99],$V8=[1,40],$V9=[1,41],$Va=[1,42],$Vb=[1,43],$Vc=[1,44],$Vd=[1,45],$Ve=[1,47],$Vf=[1,46],$Vg=[1,63],$Vh=[1,60],$Vi=[1,61],$Vj=[1,62],$Vk=[1,64],$Vl=[1,65],$Vm=[10,19,29,34,58],$Vn=[10,19,29,34,58,59],$Vo=[17,29,45,49,50,51,55,92,94],$Vp=[17,29,34,45,49,50,51,55,80,92,94],$Vq=[17,29,45,49,50,51,55,72,92,94],$Vr=[2,90],$Vs=[1,93],$Vt=[45,49,50,51,55,92,94],$Vu=[1,102],$Vv=[10,14,19,39,40,41,42,43,56,61,62,99],$Vw=[2,21],$Vx=[10,29],$Vy=[29,58],$Vz=[14,19,39,40,41,42,43,56,61,62,99],$VA=[17,29],$VB=[1,135],$VC=[1,136],$VD=[10,19],$VE=[10,71,73],$VF=[19,39,40,41,42,43,56,61,62];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"Root":3,"Protocol":4,"Decorators":5,"PROTOCOL":6,"Identifier":7,"LBRACE":8,"Statements":9,"RBRACE":10,"Doc":11,"DecoratorList":12,"Decorator":13,"AT_SIGN":14,"LPAREN":15,"ExprOrNull":16,"RPAREN":17,"Statement":18,"IDENTIFIER":19,"Enum":20,"Record":21,"Message":22,"Import":23,"Fixed":24,"Variant":25,"Choice":26,"ENUM":27,"EnumFields":28,"COMMA":29,"RECORD":30,"Fields":31,"Field":32,"Type":33,"SEMICOLON":34,"ArrayType":35,"Union":36,"MapType":37,"CustomType":38,"STRING":39,"INT":40,"BOOLEAN":41,"LONG":42,"VOID":43,"TypeOrNull":44,"NULL":45,"Value":46,"String":47,"NumBoolOrNull":48,"NUMBER":49,"TRUE":50,"FALSE":51,"ArrayValue":52,"LBRACKET":53,"Values":54,"RBRACKET":55,"ARRAY":56,"LANGLE":57,"RANGLE":58,"DOT":59,"TypeList":60,"MAP":61,"UNION":62,"TypeOrNullList":63,"VARIANT":64,"Switch":65,"Cases":66,"Case":67,"CaseName":68,"CaseBody":69,"CaseLabel":70,"CASE":71,"COLON":72,"DEFAULT":73,"SWITCH":74,"CHOICE":75,"ChoiceCases":76,"ChoiceCase":77,"IMPORT":78,"AsOpt":79,"AS":80,"ParamsOpt":81,"Oneway":82,"ONEWAY":83,"Params":84,"Param":85,"ParamDefault":86,"EQUALS":87,"Expr":88,"FIXED":89,"String1":90,"String2":91,"QUOTE1":92,"StringFrags":93,"QUOTE2":94,"StringFrag":95,"STRING_FRAG":96,"DocRaw":97,"DocFrag":98,"DOC_FRAG":99,"$accept":0,"$end":1},
terminals_: {2:"error",6:"PROTOCOL",8:"LBRACE",10:"RBRACE",14:"AT_SIGN",15:"LPAREN",17:"RPAREN",19:"IDENTIFIER",27:"ENUM",29:"COMMA",30:"RECORD",34:"SEMICOLON",39:"STRING",40:"INT",41:"BOOLEAN",42:"LONG",43:"VOID",45:"NULL",49:"NUMBER",50:"TRUE",51:"FALSE",53:"LBRACKET",55:"RBRACKET",56:"ARRAY",57:"LANGLE",58:"RANGLE",59:"DOT",61:"MAP",62:"UNION",64:"VARIANT",71:"CASE",72:"COLON",73:"DEFAULT",74:"SWITCH",75:"CHOICE",78:"IMPORT",80:"AS",83:"ONEWAY",87:"EQUALS",89:"FIXED",92:"QUOTE1",94:"QUOTE2",96:"STRING_FRAG",99:"DOC_FRAG"},
productions_: [0,[3,1],[4,6],[5,2],[12,0],[12,2],[13,5],[9,1],[9,2],[7,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[20,6],[28,1],[28,3],[21,6],[31,0],[31,2],[32,4],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[44,1],[44,1],[46,1],[46,1],[48,1],[48,1],[48,1],[48,1],[52,3],[54,1],[54,2],[35,4],[38,1],[38,3],[60,1],[60,3],[37,4],[36,4],[63,1],[63,3],[25,7],[66,1],[66,2],[68,1],[68,1],[69,2],[70,3],[70,2],[67,2],[65,5],[26,6],[76,1],[76,2],[77,4],[23,5],[79,0],[79,2],[22,8],[82,0],[82,1],[81,0],[81,1],[84,1],[84,3],[85,3],[86,0],[86,2],[16,0],[16,1],[88,1],[88,1],[24,6],[47,1],[47,1],[90,3],[91,3],[95,1],[93,0],[93,2],[11,1],[97,0],[97,2],[98,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

  return $$[$0];
    
break;
case 2:
 this.$ = new yy.Protocol({ start : _$[$0-5], decorators : $$[$0-5], name : $$[$0-3], statements : $$[$0-1], }); 
break;
case 3:
 this.$ = new yy.Decorators({start : _$[$0-1], doc : $$[$0-1], decorator_list: $$[$0]}); 
break;
case 4: case 21:
 this.$ = []; 
break;
case 5:
this.$ = $$[$0-1].concat($$[$0]) 
break;
case 6:
 this.$ = new yy.Decorator({ start: _$[$0-3], label : $$[$0-3], args : $$[$0-1] }); 
break;
case 7: case 42:
 this.$ = [$$[$0]]; 
break;
case 8: case 22: case 43:
 this.$ = $$[$0-1].concat($$[$0]); 
break;
case 9:
 this.$ = new yy.Identifier({start: _$[$0], name : $$[$0] }); 
break;
case 17:
 this.$ = new yy.Enum({ start: _$[$0-5], decorators : $$[$0-5], name : $$[$0-3], constants : $$[$0-1] }); 
break;
case 18: case 51: case 75:
 this.$ = [ $$[$0] ]; 
break;
case 19: case 48:
 this.$ = $$[$0-2].concat($$[$0]) 
break;
case 20:
 this.$ = new yy.Record({ start: _$[$0-5], decorators : $$[$0-5], name : $$[$0-3], fields : $$[$0-1] }); 
break;
case 23:
 this.$ = new yy.Field({ start: _$[$0-2], type : $$[$0-2], name : $$[$0-1], decorators : $$[$0-3] }); 
break;
case 27:
 this.$ = new yy.Type({start: _$[$0], custom: $$[$0]      }); 
break;
case 28:
 this.$ = new yy.Type({start: _$[$0], prim: 'string'  }); 
break;
case 29:
 this.$ = new yy.Type({start: _$[$0], prim: 'int'     }); 
break;
case 30:
 this.$ = new yy.Type({start: _$[$0], prim: 'boolean' }); 
break;
case 31:
 this.$ = new yy.Type({start: _$[$0], prim: 'long'    }); 
break;
case 32:
 this.$ = new yy.Type({start: _$[$0], void_type: true }); 
break;
case 34:
 this.$ = new yy.Type({ start: _$[$0], null_type : true }); 
break;
case 35:
 this.$ = new yy.Value({start: _$[$0], string: $$[$0] }); 
break;
case 36:
 this.$ = $$[$0] 
break;
case 37:
 this.$ = new yy.Value({start: _$[$0], int: parseInt(yytext,10) }); 
break;
case 38:
 this.$ = new yy.Value({start: _$[$0], bool: true       }); 
break;
case 39:
 this.$ = new yy.Value({start: _$[$0], bool: false      }); 
break;
case 40:
 this.$ = new yy.Value({start: _$[$0], null_value: true }); 
break;
case 41: case 58:
 this.$ = $$[$0-1]; 
break;
case 44:
 this.$ = new yy.ArrayType({ start: _$[$0-3], type : $$[$0-1] }); 
break;
case 45: case 56: case 57: case 69: case 79: case 81: case 85: case 86:
 this.$ = $$[$0]; 
break;
case 46:
 this.$.dot($$[$0]); 
break;
case 47: case 54: case 64:
 this.$ = [ $$[$0] ] 
break;
case 49:
 this.$ = new yy.MapType({ start: _$[$0-3], params : $$[$0-1] }); 
break;
case 50:
 this.$ = new yy.Union({ start: _$[$0-3], types : $$[$0-1] }); 
break;
case 52: case 76:
 this.$ = $$[$0-2].concat($$[$0]); 
break;
case 53:
 this.$ = new yy.Variant({ start: _$[$0-6], decorators : $$[$0-6], name : $$[$0-4], switch : $$[$0-3], cases: $$[$0-1] }); 
break;
case 55: case 65:
 this.$ = $$[$0-1].concat($$[$0]) 
break;
case 59:
 this.$ = new yy.CaseLabel({ start: _$[$0-2], name: $$[$0-1], def: false }); 
break;
case 60:
 this.$ = new yy.CaseLabel({ start: _$[$0-1], def: true }) ; 
break;
case 61:
 this.$ = new yy.Case({ start: _$[$0-1], label: $$[$0-1], body: $$[$0] }); 
break;
case 62:
 this.$ = new yy.Switch({start: _$[$0-4], type: $$[$0-2], name : $$[$0-1] })
break;
case 63:
 this.$ = new yy.Choice({ start: _$[$0-5], decorators : $$[$0-5], name : $$[$0-3], choices : $$[$0-1] }) 
break;
case 66:
 this.$ = new yy.ChoiceCase({ start: _$[$0-3], label: $$[$0-3], fields: $$[$0-1] }); 
break;
case 67:
 this.$ = new yy.Import({ start: _$[$0-4], type : $$[$0-3], path : $$[$0-2], import_as: $$[$0-1] }); 
break;
case 68: case 78:
 this.$ = null; 
break;
case 70:
 this.$ = new yy.Message({ start: _$[$0-7], decorators : $$[$0-7], return_type : $$[$0-6], name : $$[$0-5], params : $$[$0-3], oneway : $$[$0-1] }); 
break;
case 71:
 this.$ = false; 
break;
case 72:
 this.$ = true 
break;
case 73:
 this.$ = [] 
break;
case 77:
 this.$ = new yy.Param({ start: _$[$0-2], type : $$[$0-2], name : $$[$0-1], def : $$[$0] }); 
break;
case 80:
 this.$ = new yy.Value({ null_value : true }) 
break;
case 83:
 this.$ = new yy.ArrayValue({start: _$[$0], values : $$[$0] }); 
break;
case 84:
 this.$ = new yy.Fixed({ start: _$[$0-5], type : $$[$0-4], len : $$[$0-2] }); 
break;
case 87:
 this.$ = new yy.String({start: _$[$0-2], end: _$[$0], val : "'" + $$[$0-1] + "'" }); 
break;
case 88:
 this.$ = new yy.String({start: _$[$0-2], end:_$[$0], val : '"' + $$[$0-1] + '"'}); 
break;
case 89: case 95:
 this.$ = yytext; 
break;
case 90: case 93:
 this.$ = ""; 
break;
case 91: case 94:
 this.$ = $$[$0-1] + $$[$0]; 
break;
case 92:
 this.$ = new yy.Doc({start : _$[$0], raw: $$[$0] }); 
break;
}
},
table: [o([6,14,99],$V0,{3:1,4:2,5:3,11:4,97:5}),{1:[3]},{1:[2,1]},{6:[1,6]},o($V1,[2,4],{12:7}),o($V1,[2,92],{98:8,99:[1,9]}),{7:10,19:$V2},o([6,19,27,30,39,40,41,42,43,56,61,62,64,75],[2,3],{13:12,14:[1,13]}),o($V3,[2,94]),o($V3,[2,95]),{8:[1,14]},o([8,10,15,17,19,29,34,58,59,72,74,87,92,94],[2,9]),o($V1,[2,5]),{7:15,19:$V2},o($V4,$V0,{11:4,97:5,9:16,18:17,20:18,21:19,22:20,23:21,24:22,25:23,26:24,5:25,78:$V5,89:$V6}),{15:[1,28]},o($V4,$V0,{11:4,97:5,20:18,21:19,22:20,23:21,24:22,25:23,26:24,5:25,18:30,10:[1,29],78:$V5,89:$V6}),o($V7,[2,7]),o($V7,[2,10]),o($V7,[2,11]),o($V7,[2,12]),o($V7,[2,13]),o($V7,[2,14]),o($V7,[2,15]),o($V7,[2,16]),{7:48,19:$V2,27:[1,31],30:[1,32],33:33,35:36,36:37,37:38,38:39,39:$V8,40:$V9,41:$Va,42:$Vb,43:$Vc,56:$Vd,61:$Ve,62:$Vf,64:[1,34],75:[1,35]},{7:49,19:$V2},{7:50,19:$V2},{16:51,17:[2,80],45:$Vg,46:53,47:55,48:56,49:$Vh,50:$Vi,51:$Vj,52:54,53:[1,57],88:52,90:58,91:59,92:$Vk,94:$Vl},{1:[2,2]},o($V7,[2,8]),{7:66,19:$V2},{7:67,19:$V2},{7:68,19:$V2},{7:69,19:$V2},{7:70,19:$V2},o($Vm,[2,24]),o($Vm,[2,25]),o($Vm,[2,26]),o($Vm,[2,27],{59:[1,71]}),o($Vm,[2,28]),o($Vm,[2,29]),o($Vm,[2,30]),o($Vm,[2,31]),o($Vm,[2,32]),{57:[1,72]},{8:[1,73]},{57:[1,74]},o($Vn,[2,45]),{47:75,90:58,91:59,92:$Vk,94:$Vl},{15:[1,76]},{17:[1,77]},{17:[2,81]},{17:[2,82]},{17:[2,83]},o($Vo,[2,35]),o($Vo,[2,36]),{45:$Vg,46:79,47:55,48:56,49:$Vh,50:$Vi,51:$Vj,54:78,90:58,91:59,92:$Vk,94:$Vl},o($Vp,[2,85]),o($Vp,[2,86]),o($Vq,[2,37]),o($Vq,[2,38]),o($Vq,[2,39]),o($Vq,[2,40]),o([92,96],$Vr,{93:80}),o([94,96],$Vr,{93:81}),{8:[1,82]},{8:[1,83]},{15:[1,84]},{65:85,74:[1,86]},{8:[1,87]},{7:88,19:$V2},{7:48,19:$V2,33:89,35:36,36:37,37:38,38:39,39:$V8,40:$V9,41:$Va,42:$Vb,43:$Vc,56:$Vd,61:$Ve,62:$Vf},{7:48,19:$V2,33:92,35:36,36:37,37:38,38:39,39:$V8,40:$V9,41:$Va,42:$Vb,43:$Vc,44:91,45:$Vs,56:$Vd,61:$Ve,62:$Vf,63:90},{7:48,19:$V2,33:95,35:36,36:37,37:38,38:39,39:$V8,40:$V9,41:$Va,42:$Vb,43:$Vc,56:$Vd,60:94,61:$Ve,62:$Vf},{34:[2,68],79:96,80:[1,97]},{49:[1,98]},o($V1,[2,6]),{45:$Vg,46:100,47:55,48:56,49:$Vh,50:$Vi,51:$Vj,55:[1,99],90:58,91:59,92:$Vk,94:$Vl},o($Vt,[2,42]),{92:[1,101],96:$Vu},{94:[1,103],96:$Vu},{7:105,19:$V2,28:104},o($Vv,$Vw,{31:106}),{7:48,17:[2,73],19:$V2,33:110,35:36,36:37,37:38,38:39,39:$V8,40:$V9,41:$Va,42:$Vb,43:$Vc,56:$Vd,61:$Ve,62:$Vf,81:107,84:108,85:109},{8:[1,111]},{15:[1,112]},{7:115,19:$V2,76:113,77:114},o($Vn,[2,46]),{58:[1,116]},{10:[1,117],29:[1,118]},o($Vx,[2,51]),o($Vx,[2,33]),o($Vx,[2,34]),{29:[1,120],58:[1,119]},o($Vy,[2,47]),{34:[1,121]},{7:122,19:$V2},{17:[1,123]},{17:[2,41]},o($Vt,[2,43]),o($Vp,[2,87]),o([92,94,96],[2,91]),o($Vp,[2,88]),{10:[1,124],29:[1,125]},o($Vx,[2,18]),o($Vz,$V0,{11:4,97:5,32:127,5:128,10:[1,126]}),{17:[1,129]},{17:[2,74],29:[1,130]},o($VA,[2,75]),{7:131,19:$V2},{66:132,67:133,70:134,71:$VB,73:$VC},{7:48,19:$V2,33:137,35:36,36:37,37:38,38:39,39:$V8,40:$V9,41:$Va,42:$Vb,43:$Vc,56:$Vd,61:$Ve,62:$Vf},{7:115,10:[1,138],19:$V2,77:139},o($VD,[2,64]),{8:[1,140]},o($Vm,[2,44]),o($Vm,[2,50]),{7:48,19:$V2,33:92,35:36,36:37,37:38,38:39,39:$V8,40:$V9,41:$Va,42:$Vb,43:$Vc,44:141,45:$Vs,56:$Vd,61:$Ve,62:$Vf},o($Vm,[2,49]),{7:48,19:$V2,33:142,35:36,36:37,37:38,38:39,39:$V8,40:$V9,41:$Va,42:$Vb,43:$Vc,56:$Vd,61:$Ve,62:$Vf},o($V7,[2,67]),{34:[2,69]},{34:[1,143]},o($V7,[2,17]),{7:144,19:$V2},o($V7,[2,20]),o($Vv,[2,22]),{7:48,19:$V2,33:145,35:36,36:37,37:38,38:39,39:$V8,40:$V9,41:$Va,42:$Vb,43:$Vc,56:$Vd,61:$Ve,62:$Vf},{34:[2,71],82:146,83:[1,147]},{7:48,19:$V2,33:110,35:36,36:37,37:38,38:39,39:$V8,40:$V9,41:$Va,42:$Vb,43:$Vc,56:$Vd,61:$Ve,62:$Vf,85:148},o($VA,[2,78],{86:149,87:[1,150]}),{10:[1,151],67:152,70:134,71:$VB,73:$VC},o($VE,[2,54]),{7:48,19:$V2,33:154,35:36,36:37,37:38,38:39,39:$V8,40:$V9,41:$Va,42:$Vb,43:$Vc,56:$Vd,61:$Ve,62:$Vf,69:153},{7:157,19:$V2,45:$Vg,48:156,49:$Vh,50:$Vi,51:$Vj,68:155},{72:[1,158]},{7:159,19:$V2},o($V7,[2,63]),o($VD,[2,65]),o($Vv,$Vw,{31:160}),o($Vx,[2,52]),o($Vy,[2,48]),o($V7,[2,84]),o($Vx,[2,19]),{7:161,19:$V2},{34:[1,162]},{34:[2,72]},o($VA,[2,76]),o($VA,[2,77]),{45:$Vg,46:163,47:55,48:56,49:$Vh,50:$Vi,51:$Vj,90:58,91:59,92:$Vk,94:$Vl},o($V7,[2,53]),o($VE,[2,55]),o($VE,[2,61]),{34:[1,164]},{72:[1,165]},{72:[2,56]},{72:[2,57]},o($VF,[2,60]),{17:[1,166]},o($Vz,$V0,{11:4,97:5,32:127,5:128,10:[1,167]}),{34:[1,168]},o($V7,[2,70]),o($VA,[2,79]),o($VE,[2,58]),o($VF,[2,59]),{8:[2,62]},o($VD,[2,66]),o($Vv,[2,23])],
defaultActions: {2:[2,1],29:[2,2],52:[2,81],53:[2,82],54:[2,83],99:[2,41],122:[2,69],147:[2,72],156:[2,56],157:[2,57],166:[2,62]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip over C++-style comments */
break;
case 1:/* skip space */
break;
case 2:return 30;
break;
case 3:return 62;
break;
case 4:return 64;
break;
case 5:return 74;
break;
case 6:return 71;
break;
case 7:return 75;
break;
case 8:return 61;
break;
case 9:return 27;
break;
case 10:return 56;
break;
case 11:return 6;
break;
case 12:return 89;
break;
case 13:return 39;
break;
case 14:return 40;
break;
case 15:return 78;
break;
case 16:return 42;
break;
case 17:return 39;
break;
case 18:return 41;
break;
case 19:return 50;
break;
case 20:return 51;
break;
case 21:return 43;
break;
case 22:return 45;
break;
case 23:return 80;
break;
case 24:return 83;
break;
case 25:return 73;
break;
case 26: return 19; 
break;
case 27: return 49; 
break;
case 28:return 8;
break;
case 29:return 10;
break;
case 30:return 15;
break;
case 31:return 17;
break;
case 32:return 53;
break;
case 33:return 55;
break;
case 34:return 57;
break;
case 35:return 58;
break;
case 36:return "SEMICOLON";
break;
case 37:return "COLON";
break;
case 38:return "COMMA";
break;
case 39:return "DOT";
break;
case 40:return 87;
break;
case 41:return 14;
break;
case 42: this.begin ('ST_QUOTE2'); return 94; 
break;
case 43: this.begin ('ST_QUOTE1'); return 92; 
break;
case 44: this.begin ('ST_DOC'); 
break;
case 45: this.begin ('ST_COMMENT'); 
break;
case 46:return 'GENERIC';
break;
case 47:return 'GENERIC';
break;
case 48:return 96;
break;
case 49:return 96;
break;
case 50: this.popState (); return "QUOTE2"; 
break;
case 51:return 'EOF';
break;
case 52:return 96;
break;
case 53:return 96;
break;
case 54: this.popState (); return "QUOTE1"; 
break;
case 55:return 'EOF';
break;
case 56: this.popState(); 
break;
case 57:/* ignore */
break;
case 58:/* ignore */
break;
case 59:return 'EOF';
break;
case 60: this.popState(); 
break;
case 61: return 99; 
break;
case 62: return 99; 
break;
case 63:return 'EOF';
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:\s+)/,/^(?:record\b)/,/^(?:union\b)/,/^(?:variant\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:choice\b)/,/^(?:map\b)/,/^(?:enum\b)/,/^(?:array\b)/,/^(?:protocol\b)/,/^(?:fixed\b)/,/^(?:string\b)/,/^(?:int\b)/,/^(?:import\b)/,/^(?:long\b)/,/^(?:string\b)/,/^(?:boolean\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:void\b)/,/^(?:null\b)/,/^(?:as\b)/,/^(?:oneway\b)/,/^(?:default\b)/,/^(?:[a-zA-Z_][a-zA-Z_0-9]*)/,/^(?:[-]?[0-9]+)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:<)/,/^(?:>)/,/^(?:;)/,/^(?::)/,/^(?:,)/,/^(?:\.)/,/^(?:=)/,/^(?:@)/,/^(?:")/,/^(?:')/,/^(?:\/\*\*)/,/^(?:\/\*)/,/^(?:[^!.\/{}()\[\];,:"'\s]+)/,/^(?:.)/,/^(?:\\.)/,/^(?:[^\\"]+)/,/^(?:")/,/^(?:$)/,/^(?:\\.)/,/^(?:[^\\']+)/,/^(?:')/,/^(?:$)/,/^(?:\*\/)/,/^(?:\*)/,/^(?:[^*]+)/,/^(?:$)/,/^(?:\*\/)/,/^(?:\*)/,/^(?:[^*]+)/,/^(?:$)/],
conditions: {"ST_QUOTE2":{"rules":[48,49,50,51],"inclusive":true},"ST_QUOTE1":{"rules":[52,53,54,55],"inclusive":true},"ST_COMMENT":{"rules":[56,57,58,59],"inclusive":true},"ST_DOC":{"rules":[60,61,62,63],"inclusive":true},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}