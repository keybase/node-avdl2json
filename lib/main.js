// Generated by IcedCoffeeScript 108.0.12
(function() {
  var FileRunner, Main, Parser, Stack, astmod, colors, fs, iced, make_esc, minimist, output, parse, pathmod, usage, __iced_k, __iced_k_noop;

  iced = require('iced-runtime');
  __iced_k = __iced_k_noop = function() {};

  fs = require('fs');

  Parser = require('./parser').Parser;

  minimist = require('minimist');

  make_esc = require('iced-error').make_esc;

  colors = require('colors');

  astmod = require('./ast');

  pathmod = require('path');

  usage = function() {
    return console.error("usage:\nsingle file: avdl2json [-2] -i <infile> -o <outfile>\nbatch:       avdl2json [-2] -b -o <outdir> <infiles...>");
  };

  Stack = (function() {
    function Stack(d) {
      this.d = d;
      this.d || (this.d = {});
    }

    Stack.prototype.push = function(nm) {
      var k, ret, v, _ref;
      ret = {};
      _ref = this.d;
      for (k in _ref) {
        v = _ref[k];
        ret[k] = v;
      }
      ret[nm] = true;
      return new Stack(ret);
    };

    Stack.prototype.lookup = function(nm) {
      return this.d[nm];
    };

    return Stack;

  })();

  exports.FileRunner = FileRunner = (function() {
    function FileRunner(_arg) {
      this.infile = _arg.infile, this.stack = _arg.stack, this.dir = _arg.dir, this.version = _arg.version;
      this.stack || (this.stack = new Stack);
    }

    FileRunner.prototype.get_infile = function() {
      var ret;
      ret = pathmod.join(this.dir, this.infile);
      return ret;
    };

    FileRunner.prototype.open_infile = function(opts, cb) {
      var dat, esc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "open_infile");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/miles/go/src/github.com/keybase/node-avdl2json/src/main.iced",
            funcname: "FileRunner.open_infile"
          });
          fs.readFile(_this.get_infile(), esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return dat = arguments[0];
              };
            })(),
            lineno: 49
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(null, dat.toString('utf8'));
        };
      })(this));
    };

    FileRunner.prototype.parse = function(_arg, cb) {
      var ast, dat, e, err, parser;
      dat = _arg.dat;
      parser = new Parser();
      parser.yy = astmod;
      if (this.version === 2) {
        parser.yy.Protocol = astmod.ProtocolV2;
        parser.yy.Type = astmod.TypeV2;
      }
      ast = null;
      try {
        ast = parser.parse(dat);
      } catch (_error) {
        e = _error;
        err = new Error("Parse error in: " + this.infile + ": " + e.message);
      }
      return cb(err, ast);
    };

    FileRunner.prototype.recurse = function(_arg, cb) {
      var ast, err, esc, i, nm, p, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      ast = _arg.ast;
      esc = make_esc(cb, "recurse");
      err = null;
      (function(_this) {
        return (function(__iced_k) {
          var _i, _len, _ref, _results, _while;
          _ref = ast.get_imports();
          _len = _ref.length;
          _i = 0;
          _while = function(__iced_k) {
            var _break, _continue, _next;
            _break = __iced_k;
            _continue = function() {
              return iced.trampoline(function() {
                ++_i;
                return _while(__iced_k);
              });
            };
            _next = _continue;
            if (!(_i < _len)) {
              return _break();
            } else {
              i = _ref[_i];
              (function(__iced_k) {
                if (_this.stack.lookup((nm = i.get_path().eval_to_string()))) {
                  err = new Error("import cycle found with '" + nm + "'");
                  (function(__iced_k) {
_break()
                  })(__iced_k);
                } else {
                  return __iced_k();
                }
              })(function() {
                p = new FileRunner({
                  infile: nm,
                  stack: _this.stack.push(nm),
                  dir: _this.dir
                });
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/Users/miles/go/src/github.com/keybase/node-avdl2json/src/main.iced",
                    funcname: "FileRunner.recurse"
                  });
                  p.run({}, esc(__iced_deferrals.defer({
                    assign_fn: (function() {
                      return function() {
                        return ast = arguments[0];
                      };
                    })(),
                    lineno: 77
                  })));
                  __iced_deferrals._fulfill();
                })(function() {
                  return _next(i.set_protocol(ast));
                });
              });
            }
          };
          _while(__iced_k);
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    FileRunner.prototype.run = function(opts, cb) {
      var ast, dat, esc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "run");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/miles/go/src/github.com/keybase/node-avdl2json/src/main.iced",
            funcname: "FileRunner.run"
          });
          _this.open_infile({}, esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return dat = arguments[0];
              };
            })(),
            lineno: 85
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/miles/go/src/github.com/keybase/node-avdl2json/src/main.iced",
              funcname: "FileRunner.run"
            });
            _this.parse({
              dat: dat
            }, esc(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return ast = arguments[0];
                };
              })(),
              lineno: 86
            })));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              if (!(_this.version === 2)) {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/Users/miles/go/src/github.com/keybase/node-avdl2json/src/main.iced",
                    funcname: "FileRunner.run"
                  });
                  _this.recurse({
                    ast: ast
                  }, esc(__iced_deferrals.defer({
                    lineno: 87
                  })));
                  __iced_deferrals._fulfill();
                })(__iced_k);
              } else {
                return __iced_k();
              }
            })(function() {
              return cb(null, ast);
            });
          });
        };
      })(this));
    };

    return FileRunner;

  })();

  exports.parse = parse = function(_arg, cb) {
    var ast, err, infile, p, version, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    infile = _arg.infile, version = _arg.version;
    p = new FileRunner({
      infile: pathmod.basename(infile),
      dir: pathmod.dirname(infile),
      version: version
    });
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/Users/miles/go/src/github.com/keybase/node-avdl2json/src/main.iced"
        });
        p.run({}, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return ast = arguments[1];
            };
          })(),
          lineno: 94
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        return cb(err, ast);
      };
    })(this));
  };

  exports.output = output = function(_arg, cb) {
    var ast, err, json, outfile, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    ast = _arg.ast, outfile = _arg.outfile;
    json = ast.to_json();
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/Users/miles/go/src/github.com/keybase/node-avdl2json/src/main.iced"
        });
        fs.writeFile(outfile, JSON.stringify(json, null, 2), __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return err = arguments[0];
            };
          })(),
          lineno: 101
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        return cb(err);
      };
    })(this));
  };

  exports.Main = Main = (function() {
    function Main() {
      this.version = 1;
    }

    Main.prototype.parse_argv = function(_arg, cb) {
      var argv, err, f, _i, _len, _ref;
      argv = _arg.argv;
      argv = minimist(argv);
      if (argv.h) {
        usage();
        err = new Error("usage: shown!");
      } else if ((this.batch = argv.b)) {
        this.outdir = argv.o;
        this.infiles = argv._;
        this.forcefiles = {};
        if (argv.f != null) {
          _ref = argv.f;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            f = _ref[_i];
            this.forcefiles[f] = true;
          }
        }
        if (!((this.outdir != null) && this.infiles.length)) {
          err = new Error("need an [-o <outdir>] and input files in batch mode");
        }
      } else {
        this.outfile = argv.o;
        this.infile = argv.i;
        if (!((this.outfile != null) && (this.infile != null))) {
          err = new Error("need an [-i <infile>] and a [-o <outfile>]");
        }
      }
      this.version = argv["2"] ? 2 : 1;
      return cb(err);
    };

    Main.prototype.make_outfile = function(f) {
      return pathmod.join(this.outdir, (pathmod.basename(f, '.avdl')) + ".json");
    };

    Main.prototype.skip_infile = function(_arg, cb) {
      var err, esc, infile, outfile, s0, s1, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      infile = _arg.infile, outfile = _arg.outfile;
      esc = make_esc(cb, "skip_infile");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/miles/go/src/github.com/keybase/node-avdl2json/src/main.iced",
            funcname: "Main.skip_infile"
          });
          fs.stat(infile, esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return s0 = arguments[0];
              };
            })(),
            lineno: 144
          })));
          fs.stat(outfile, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return s1 = arguments[1];
              };
            })(),
            lineno: 145
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(null, !(typeof err !== "undefined" && err !== null) && (s0.mtime <= s1.mtime));
        };
      })(this));
    };

    Main.prototype.do_batch_mode = function(opts, cb) {
      var ast, esc, f, outfile, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "do_batch_mode");
      (function(_this) {
        return (function(__iced_k) {
          var _i, _len, _ref, _results, _while;
          _ref = _this.infiles;
          _len = _ref.length;
          _i = 0;
          _while = function(__iced_k) {
            var _break, _continue, _next;
            _break = __iced_k;
            _continue = function() {
              return iced.trampoline(function() {
                ++_i;
                return _while(__iced_k);
              });
            };
            _next = _continue;
            if (!(_i < _len)) {
              return _break();
            } else {
              f = _ref[_i];
              outfile = _this.make_outfile(f);
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/miles/go/src/github.com/keybase/node-avdl2json/src/main.iced",
                  funcname: "Main.do_batch_mode"
                });
                parse({
                  infile: f,
                  version: _this.version
                }, esc(__iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return ast = arguments[0];
                    };
                  })(),
                  lineno: 154
                })));
                __iced_deferrals._fulfill();
              })(function() {
                (function(__iced_k) {
                  if (ast.has_messages() || _this.forcefiles[f] || (_this.version === 2)) {
                    (function(__iced_k) {
                      __iced_deferrals = new iced.Deferrals(__iced_k, {
                        parent: ___iced_passed_deferral,
                        filename: "/Users/miles/go/src/github.com/keybase/node-avdl2json/src/main.iced",
                        funcname: "Main.do_batch_mode"
                      });
                      output({
                        ast: ast,
                        outfile: outfile
                      }, esc(__iced_deferrals.defer({
                        lineno: 156
                      })));
                      __iced_deferrals._fulfill();
                    })(function() {
                      return __iced_k(console.log("Compiling " + f + " -> " + outfile));
                    });
                  } else {
                    return __iced_k();
                  }
                })(_next);
              });
            }
          };
          _while(__iced_k);
        });
      })(this)((function(_this) {
        return function() {
          return cb(null);
        };
      })(this));
    };

    Main.prototype.main = function(_arg, cb) {
      var argv, ast, esc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      argv = _arg.argv;
      esc = make_esc(cb, "main");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/miles/go/src/github.com/keybase/node-avdl2json/src/main.iced",
            funcname: "Main.main"
          });
          _this.parse_argv({
            argv: argv
          }, esc(__iced_deferrals.defer({
            lineno: 164
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            if (_this.batch) {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/miles/go/src/github.com/keybase/node-avdl2json/src/main.iced",
                  funcname: "Main.main"
                });
                _this.do_batch_mode({}, esc(__iced_deferrals.defer({
                  lineno: 166
                })));
                __iced_deferrals._fulfill();
              })(__iced_k);
            } else {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/miles/go/src/github.com/keybase/node-avdl2json/src/main.iced",
                  funcname: "Main.main"
                });
                parse({
                  infile: _this.infile,
                  version: _this.version
                }, esc(__iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return ast = arguments[0];
                    };
                  })(),
                  lineno: 168
                })));
                __iced_deferrals._fulfill();
              })(function() {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/Users/miles/go/src/github.com/keybase/node-avdl2json/src/main.iced",
                    funcname: "Main.main"
                  });
                  output({
                    ast: ast,
                    outfile: _this.outfile
                  }, esc(__iced_deferrals.defer({
                    lineno: 169
                  })));
                  __iced_deferrals._fulfill();
                })(__iced_k);
              });
            }
          })(function() {
            return cb(null);
          });
        };
      })(this));
    };

    return Main;

  })();

  exports.main = function() {
    var err, main, rc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    main = new Main;
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/Users/miles/go/src/github.com/keybase/node-avdl2json/src/main.iced",
          funcname: "main"
        });
        main.main({
          argv: process.argv.slice(2)
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return err = arguments[0];
            };
          })(),
          lineno: 176
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        rc = 0;
        if (typeof err !== "undefined" && err !== null) {
          rc = -2;
          console.error(err.toString().red);
        }
        return process.exit(rc);
      };
    })(this));
  };

}).call(this);
