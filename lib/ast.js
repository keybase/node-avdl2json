// Generated by IcedCoffeeScript 108.0.11
(function() {
  var ArrayType, ArrayValue, Case, CaseBody, CaseLabel, Choice, ChoiceCase, Decorator, Decorators, Doc, Enum, Field, Fixed, Identifier, Import, MapType, Message, Node, Param, Protocol, ProtocolBase, ProtocolV2, Record, String, Switch, Type, TypeBase, TypeV2, Union, Value, Variant,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Node = (function() {
    function Node(_arg) {
      this.start = _arg.start, this.end = _arg.end, this.decorators = _arg.decorators;
    }

    Node.prototype.is_import = function() {
      return false;
    };

    Node.prototype.is_type_decl = function() {
      return false;
    };

    Node.prototype.is_message = function() {
      return false;
    };

    Node.prototype.decorate = function(out) {
      if (this.decorators != null) {
        return this.decorators.decorate(out);
      } else {
        return out;
      }
    };

    return Node;

  })();

  ProtocolBase = (function(_super) {
    __extends(ProtocolBase, _super);

    function ProtocolBase(_arg) {
      var decorators, end, start;
      start = _arg.start, end = _arg.end, this.name = _arg.name, this.statements = _arg.statements, decorators = _arg.decorators;
      ProtocolBase.__super__.constructor.call(this, {
        start: start,
        end: end,
        decorators: decorators
      });
    }

    ProtocolBase.prototype.get_imports = function() {
      var i, _i, _len, _ref, _results;
      _ref = this.statements;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        if (i.is_import()) {
          _results.push(i);
        }
      }
      return _results;
    };

    ProtocolBase.prototype.get_type_decls = function() {
      var t, _i, _len, _ref, _results;
      _ref = this.statements;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        t = _ref[_i];
        if (t.is_type_decl()) {
          _results.push(t);
        }
      }
      return _results;
    };

    ProtocolBase.prototype.get_all_messages = function() {
      var m, _i, _len, _ref, _results;
      _ref = this.statements;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        m = _ref[_i];
        if (m.is_message()) {
          _results.push(m);
        }
      }
      return _results;
    };

    ProtocolBase.prototype.has_messages = function() {
      return this.get_all_messages().length > 0;
    };

    ProtocolBase.prototype.to_json = function() {
      var i, m, out, t, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
      out = {
        protocol: this.name.to_json()
      };
      this.output_imports(out);
      out.types = [];
      _ref = this.get_protocols_for_output_types();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        _ref1 = i.get_type_decls();
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          t = _ref1[_j];
          out.types.push(t.to_json());
        }
      }
      out.messages = {};
      _ref2 = this.get_all_messages();
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        m = _ref2[_k];
        m.to_json(out.messages);
      }
      return this.decorate(out);
    };

    ProtocolBase.prototype.get_all_protocols = function(seen) {
      var i, nm, p, ret, _i, _j, _len, _len1, _ref, _ref1;
      ret = [];
      seen || (seen = {});
      _ref = this.get_imports();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        if (!(!seen[nm = i.path.eval_to_string()])) {
          continue;
        }
        seen[nm] = true;
        _ref1 = i.protocol.get_all_protocols(seen);
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          p = _ref1[_j];
          ret.push(p);
        }
      }
      ret.push(this);
      return ret;
    };

    return ProtocolBase;

  })(Node);

  Protocol = (function(_super) {
    __extends(Protocol, _super);

    function Protocol() {
      return Protocol.__super__.constructor.apply(this, arguments);
    }

    Protocol.prototype.get_protocols_for_output_types = function() {
      return this.get_all_protocols();
    };

    Protocol.prototype.output_imports = function(out) {
      return out;
    };

    return Protocol;

  })(ProtocolBase);

  ProtocolV2 = (function(_super) {
    __extends(ProtocolV2, _super);

    function ProtocolV2() {
      return ProtocolV2.__super__.constructor.apply(this, arguments);
    }

    ProtocolV2.prototype.get_protocols_for_output_types = function() {
      return [this];
    };

    ProtocolV2.prototype.output_imports = function(out) {
      var i;
      out.imports = (function() {
        var _i, _len, _ref, _results;
        _ref = this.get_imports();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          _results.push(i.to_json());
        }
        return _results;
      }).call(this);
      return out;
    };

    return ProtocolV2;

  })(ProtocolBase);

  Decorator = (function(_super) {
    __extends(Decorator, _super);

    function Decorator(_arg) {
      var end, start;
      start = _arg.start, end = _arg.end, this.label = _arg.label, this.args = _arg.args;
      Decorator.__super__.constructor.call(this, {
        start: start,
        end: end
      });
    }

    Decorator.prototype.decorate = function(out) {
      return out[this.label.to_json()] = this.args.to_json();
    };

    return Decorator;

  })(Node);

  Decorators = (function(_super) {
    __extends(Decorators, _super);

    function Decorators(_arg) {
      var end, start;
      start = _arg.start, end = _arg.end, this.doc = _arg.doc, this.decorator_list = _arg.decorator_list;
      Decorators.__super__.constructor.call(this, {
        start: start,
        end: end
      });
    }

    Decorators.prototype.decorate = function(out) {
      var d, _i, _len, _ref;
      if ((d = this.doc.get_doc_string()) != null) {
        out.doc = d;
      }
      _ref = this.decorator_list;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        d = _ref[_i];
        d.decorate(out);
      }
      return out;
    };

    return Decorators;

  })(Node);

  Identifier = (function(_super) {
    __extends(Identifier, _super);

    function Identifier(_arg) {
      var end, start;
      start = _arg.start, end = _arg.end, this.name = _arg.name;
      Identifier.__super__.constructor.call(this, {
        start: start,
        end: end
      });
    }

    Identifier.prototype.to_json = function() {
      return this.name;
    };

    Identifier.prototype.dot = function(n2) {
      return this.name = this.name + "." + n2.name;
    };

    return Identifier;

  })(Node);

  Enum = (function(_super) {
    __extends(Enum, _super);

    function Enum(_arg) {
      var decorators, end, start;
      start = _arg.start, end = _arg.end, this.name = _arg.name, decorators = _arg.decorators, this.constants = _arg.constants;
      Enum.__super__.constructor.call(this, {
        start: start,
        end: end,
        decorators: decorators
      });
    }

    Enum.prototype.is_type_decl = function() {
      return true;
    };

    Enum.prototype.to_json = function() {
      var c;
      return this.decorate({
        type: "enum",
        name: this.name.to_json(),
        symbols: (function() {
          var _i, _len, _ref, _results;
          _ref = this.constants;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            c = _ref[_i];
            _results.push(c.to_json());
          }
          return _results;
        }).call(this)
      });
    };

    return Enum;

  })(Node);

  Record = (function(_super) {
    __extends(Record, _super);

    function Record(_arg) {
      var decorators, end, start;
      start = _arg.start, end = _arg.end, decorators = _arg.decorators, this.name = _arg.name, this.fields = _arg.fields;
      Record.__super__.constructor.call(this, {
        start: start,
        end: end,
        decorators: decorators
      });
    }

    Record.prototype.is_type_decl = function() {
      return true;
    };

    Record.prototype.to_json = function() {
      var f;
      return this.decorate({
        type: "record",
        name: this.name.to_json(),
        fields: (function() {
          var _i, _len, _ref, _results;
          _ref = this.fields;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            f = _ref[_i];
            _results.push(f.to_json());
          }
          return _results;
        }).call(this)
      });
    };

    return Record;

  })(Node);

  Field = (function(_super) {
    __extends(Field, _super);

    function Field(_arg) {
      var decorators, end, start;
      start = _arg.start, end = _arg.end, this.type = _arg.type, this.name = _arg.name, decorators = _arg.decorators;
      Field.__super__.constructor.call(this, {
        start: start,
        end: end,
        decorators: decorators
      });
    }

    Field.prototype.to_json = function() {
      return this.decorate({
        type: this.type.to_json(),
        name: this.name.to_json()
      });
    };

    return Field;

  })(Node);

  TypeBase = (function(_super) {
    __extends(TypeBase, _super);

    function TypeBase(_arg) {
      var end, start;
      start = _arg.start, end = _arg.end, this.prim = _arg.prim, this.custom = _arg.custom, this.void_type = _arg.void_type, this.null_type = _arg.null_type;
      TypeBase.__super__.constructor.call(this, {
        start: start,
        end: end
      });
    }

    TypeBase.prototype.to_json = function() {
      if (this.prim != null) {
        return this.prim;
      } else if (this.custom != null) {
        return this.custom.to_json();
      } else if (this.null_type != null) {
        return this.null_value();
      } else if (this.void_type) {
        return this.null_value();
      }
    };

    return TypeBase;

  })(Node);

  Type = (function(_super) {
    __extends(Type, _super);

    function Type() {
      return Type.__super__.constructor.apply(this, arguments);
    }

    Type.prototype.null_value = function() {
      return "null";
    };

    return Type;

  })(TypeBase);

  TypeV2 = (function(_super) {
    __extends(TypeV2, _super);

    function TypeV2() {
      return TypeV2.__super__.constructor.apply(this, arguments);
    }

    TypeV2.prototype.null_value = function() {
      return null;
    };

    return TypeV2;

  })(TypeBase);

  Value = (function(_super) {
    __extends(Value, _super);

    function Value(_arg) {
      var end, start;
      start = _arg.start, end = _arg.end, this.int = _arg.int, this.string = _arg.string, this.bool = _arg.bool, this.null_value = _arg.null_value;
      Value.__super__.constructor.call(this, {
        start: start,
        end: end
      });
    }

    Value.prototype.to_json = function() {
      if (this.string != null) {
        return this.string.eval_to_string();
      } else if (this.int != null) {
        return this.int;
      } else if (this.bool != null) {
        return this.bool;
      } else {
        return null;
      }
    };

    return Value;

  })(Node);

  ArrayType = (function(_super) {
    __extends(ArrayType, _super);

    function ArrayType(_arg) {
      var end, start;
      start = _arg.start, end = _arg.end, this.type = _arg.type;
      ArrayType.__super__.constructor.call(this, {
        start: start,
        end: end
      });
    }

    ArrayType.prototype.to_json = function() {
      return {
        type: "array",
        items: this.type.to_json()
      };
    };

    return ArrayType;

  })(Node);

  MapType = (function(_super) {
    __extends(MapType, _super);

    function MapType(_arg) {
      var end, params, start;
      start = _arg.start, end = _arg.end, params = _arg.params;
      MapType.__super__.constructor.call(this, {
        start: start,
        end: end
      });
      this.keys = params.length > 1 ? params.shift() : null;
      this.values = params[0];
    }

    MapType.prototype.to_json = function() {
      var ret;
      ret = {
        type: "map",
        values: this.values.to_json()
      };
      if (this.keys != null) {
        ret.keys = this.keys.to_json();
      }
      return ret;
    };

    return MapType;

  })(Node);

  Union = (function(_super) {
    __extends(Union, _super);

    function Union(_arg) {
      var decorators, end, start;
      start = _arg.start, end = _arg.end, this.types = _arg.types, decorators = _arg.decorators;
      Union.__super__.constructor.call(this, {
        start: start,
        end: end,
        decorators: decorators
      });
    }

    Union.prototype.is_type_decl = function() {
      return true;
    };

    Union.prototype.to_json = function() {
      var t;
      return this.decorate((function() {
        var _i, _len, _ref, _results;
        _ref = this.types;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          t = _ref[_i];
          _results.push(t.to_json());
        }
        return _results;
      }).call(this));
    };

    return Union;

  })(Node);

  Variant = (function(_super) {
    __extends(Variant, _super);

    function Variant(_arg) {
      var decorators, end, start;
      start = _arg.start, end = _arg.end, this.name = _arg.name, this["switch"] = _arg["switch"], this.cases = _arg.cases, decorators = _arg.decorators;
      Variant.__super__.constructor.call(this, {
        start: start,
        end: end,
        decorators: decorators
      });
    }

    Variant.prototype.is_type_decl = function() {
      return true;
    };

    Variant.prototype.to_json = function() {
      var c;
      return this.decorate({
        type: "variant",
        name: this.name.to_json(),
        "switch": this["switch"].to_json(),
        cases: (function() {
          var _i, _len, _ref, _results;
          _ref = this.cases;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            c = _ref[_i];
            _results.push(c.to_json());
          }
          return _results;
        }).call(this)
      });
    };

    return Variant;

  })(Node);

  Switch = (function(_super) {
    __extends(Switch, _super);

    function Switch(_arg) {
      var end, start;
      start = _arg.start, end = _arg.end, this.type = _arg.type, this.name = _arg.name;
      Switch.__super__.constructor.call(this, {
        start: start,
        end: end
      });
    }

    Switch.prototype.to_json = function() {
      return {
        type: this.type.to_json(),
        name: this.name.to_json()
      };
    };

    return Switch;

  })(Node);

  Case = (function(_super) {
    __extends(Case, _super);

    function Case(_arg) {
      var end, start;
      start = _arg.start, end = _arg.end, this.label = _arg.label, this.body = _arg.body;
      Case.__super__.constructor.call(this, {
        start: start,
        end: end
      });
    }

    Case.prototype.to_json = function() {
      return {
        label: this.label.to_json(),
        body: this.body.to_json()
      };
    };

    return Case;

  })(Node);

  CaseLabel = (function(_super) {
    __extends(CaseLabel, _super);

    function CaseLabel(_arg) {
      var end, start;
      start = _arg.start, end = _arg.end, this.name = _arg.name, this.def = _arg.def;
      CaseLabel.__super__.constructor.call(this, {
        start: start,
        end: end
      });
    }

    CaseLabel.prototype.to_json = function() {
      var _ref;
      return {
        name: (_ref = this.name) != null ? _ref.to_json() : void 0,
        def: this.def
      };
    };

    return CaseLabel;

  })(Node);

  CaseBody = (function(_super) {
    __extends(CaseBody, _super);

    function CaseBody(_arg) {
      var end, start;
      start = _arg.start, end = _arg.end, this.type = _arg.type, this.name = _arg.name;
      CaseBody.__super__.constructor.call(this, {
        start: start,
        end: end
      });
    }

    CaseBody.prototype.to_json = function() {
      return {
        type: this.type.to_json(),
        name: this.name.to_json()
      };
    };

    return CaseBody;

  })(Node);

  Choice = (function(_super) {
    __extends(Choice, _super);

    function Choice(_arg) {
      var decorators, end, start;
      start = _arg.start, end = _arg.end, this.name = _arg.name, this.choices = _arg.choices, decorators = _arg.decorators;
      Choice.__super__.constructor.call(this, {
        start: start,
        end: end,
        decorators: decorators
      });
    }

    Choice.prototype.is_type_decl = function() {
      return true;
    };

    Choice.prototype.to_json = function() {
      var c;
      return this.decorate({
        type: "choice",
        name: this.name.to_json(),
        choices: (function() {
          var _i, _len, _ref, _results;
          _ref = this.choices;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            c = _ref[_i];
            _results.push(c.to_json());
          }
          return _results;
        }).call(this)
      });
    };

    return Choice;

  })(Node);

  ChoiceCase = (function(_super) {
    __extends(ChoiceCase, _super);

    function ChoiceCase(_arg) {
      var end, start;
      start = _arg.start, end = _arg.end, this.label = _arg.label, this.fields = _arg.fields;
      ChoiceCase.__super__.constructor.call(this, {
        start: start,
        end: end
      });
    }

    ChoiceCase.prototype.to_json = function() {
      var f;
      return {
        label: this.label.to_json(),
        fields: (function() {
          var _i, _len, _ref, _results;
          _ref = this.fields;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            f = _ref[_i];
            _results.push(f.to_json());
          }
          return _results;
        }).call(this)
      };
    };

    return ChoiceCase;

  })(Node);

  Import = (function(_super) {
    __extends(Import, _super);

    function Import(_arg) {
      var end, start;
      start = _arg.start, end = _arg.end, this.type = _arg.type, this.path = _arg.path, this.import_as = _arg.import_as;
      Import.__super__.constructor.call(this, {
        start: start,
        end: end
      });
    }

    Import.prototype.is_import = function() {
      return true;
    };

    Import.prototype.set_protocol = function(ast) {
      return this.protocol = ast;
    };

    Import.prototype.get_path = function() {
      return this.path;
    };

    Import.prototype.to_json = function() {
      var out;
      out = {};
      if (this.path != null) {
        out.path = this.path.eval_to_string();
      }
      if (this.type != null) {
        out.type = this.type.to_json();
      }
      if (this.import_as != null) {
        out.import_as = this.import_as.to_json();
      }
      return out;
    };

    return Import;

  })(Node);

  Message = (function(_super) {
    __extends(Message, _super);

    function Message(_arg) {
      var decorators, end, start;
      start = _arg.start, end = _arg.end, decorators = _arg.decorators, this.name = _arg.name, this.params = _arg.params, this.return_type = _arg.return_type, this.oneway = _arg.oneway;
      Message.__super__.constructor.call(this, {
        start: start,
        end: end,
        decorators: decorators
      });
    }

    Message.prototype.is_message = function() {
      return true;
    };

    Message.prototype.to_json = function(out) {
      var msg, p;
      msg = {
        request: (function() {
          var _i, _len, _ref, _results;
          _ref = this.params;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            p = _ref[_i];
            _results.push(p.to_json());
          }
          return _results;
        }).call(this),
        response: this.return_type.to_json()
      };
      if (this.oneway) {
        msg.oneway = true;
      }
      out[this.name.to_json()] = this.decorate(msg);
      return out;
    };

    return Message;

  })(Node);

  Param = (function(_super) {
    __extends(Param, _super);

    function Param(_arg) {
      var end, start;
      start = _arg.start, end = _arg.end, this.type = _arg.type, this.name = _arg.name, this.def = _arg.def;
      Param.__super__.constructor.call(this, {
        start: start,
        end: end
      });
    }

    Param.prototype.to_json = function() {
      var out;
      out = {
        name: this.name.to_json(),
        type: this.type.to_json()
      };
      if (this.def != null) {
        out["default"] = this.def.to_json();
      }
      return out;
    };

    return Param;

  })(Node);

  ArrayValue = (function(_super) {
    __extends(ArrayValue, _super);

    function ArrayValue(_arg) {
      var end, start;
      start = _arg.start, end = _arg.end, this.type = _arg.type, this.name = _arg.name, this.def = _arg.def;
      ArrayValue.__super__.constructor.call(this, {
        start: start,
        end: end
      });
    }

    return ArrayValue;

  })(Node);

  Fixed = (function(_super) {
    __extends(Fixed, _super);

    function Fixed(_arg) {
      var end, start;
      start = _arg.start, end = _arg.end, this.type = _arg.type, this.len = _arg.len;
      Fixed.__super__.constructor.call(this, {
        start: start,
        end: end
      });
    }

    Fixed.prototype.is_type_decl = function() {
      return true;
    };

    Fixed.prototype.to_json = function() {
      return this.decorate({
        type: "fixed",
        name: this.type.to_json(),
        size: this.len
      });
    };

    return Fixed;

  })(Node);

  String = (function(_super) {
    __extends(String, _super);

    function String(_arg) {
      var end, start;
      start = _arg.start, end = _arg.end, this.type = _arg.type, this.val = _arg.val;
      String.__super__.constructor.call(this, {
        start: start,
        end: end
      });
    }

    String.prototype.eval_to_string = function() {
      return JSON.parse(this.val);
    };

    return String;

  })(Node);

  Doc = (function(_super) {
    __extends(Doc, _super);

    function Doc(_arg) {
      var end, raw, start;
      start = _arg.start, end = _arg.end, raw = _arg.raw;
      Doc.__super__.constructor.call(this, {
        start: start,
        end: end
      });
      this.doc = raw.trim();
    }

    Doc.prototype.get_doc_string = function() {
      if (this.doc.length) {
        return this.doc;
      } else {
        return null;
      }
    };

    return Doc;

  })(Node);

  module.exports = {
    Protocol: Protocol,
    Decorator: Decorator,
    Identifier: Identifier,
    Enum: Enum,
    Decorators: Decorators,
    Record: Record,
    Field: Field,
    Type: Type,
    Value: Value,
    ArrayType: ArrayType,
    Union: Union,
    Import: Import,
    Message: Message,
    Param: Param,
    ArrayValue: ArrayValue,
    Fixed: Fixed,
    String: String,
    Doc: Doc,
    MapType: MapType,
    ProtocolV2: ProtocolV2,
    TypeV2: TypeV2,
    Variant: Variant,
    Switch: Switch,
    Case: Case,
    CaseLabel: CaseLabel,
    CaseBody: CaseBody,
    Choice: Choice,
    ChoiceCase: ChoiceCase
  };

}).call(this);
